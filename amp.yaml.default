---
amp_bootstrap:
    # configuration for the AMP bootstrap    
    

amp:
    # This is overall configuration -- things that apply to all components
    
    # URL configuration    
    # Hostname used in public URLs.  For a workstation install this can be 
    # localhost.  If AMP is being proxied (see 'https') then the host should
    # be the URL of the proxy (i.e.  amp.example.edu)
    host: localhost
    # The base port -- different services run relative to this port
    # port + 0 = Tomcat HTTP server (The User Interface and REST API)
    # port + 1 = Tomcat Shutdown port
    # port + 2 = Galaxy
    port: 8080

    # If https is set then url for AMP will be:
    #   https://{host}/
    # if it is not then
    #   http://{host}:{port}/
    https: false


    # All of the data is relative to the installation directory.
    data_root: data

galaxy:    
    # what interface galaxy should bind to.  This should be fairly 
    # restricted.  If the parameter is missing then it will bind to all interfaces.
    host: localhost

    # galaxy root URL
    root: /rest/galaxy

    # Authentication bits
    admin_username: myuser@example.edu
    admin_password: my admin password

    # this should be a random string of 5-56 characters that is used to generate encoded
    # ids between the galaxy instance and the client.  Because AMP stores various IDs as
    # part of its operation, changing this value after the initial setup will make all of
    # the data inaccessable.
    id_secret: CHANGE ME

    # generic uwsgi settings -- these are copied as-is into the UWSGI
    # section of the configuration file.  Generally there's no need to mess
    # with these.  Note:  that section of the yaml file isn't really yaml, so
    # arrays will be written as multiple key/value pairs.
    uwsgi:
        buffer-size: 16834
        processes: 1
        thunder-lock: false
        enable-threads: true
        threads: 4
        offload-threads: 2
        die-on-term: true
        hook-master-start: 
          - unix_signal:2 gracefully_kill_them_all
          - unix_signal:15 gracefully_kill_them_all
        master: false
        pythonpath: lib
        virtualenv: .venv
        py-call-osafterfork: false
        umask: '002'
        static-map:
          - /static=static
          - /favicon.ico=static/favicon.ico
        static-safe: client/src/assets

    # Generic galaxy settings -- copied as-is to the galaxy section
    # of the configuration.  You shouldn't need to mess with this.
    galaxy:
        watch_tools: polling
        allow_path_paste: true
        require_login: true
        allow_user_creation: false
        x_frame_options:
        logging:
            version: 1
            disable_existing_loggers: False            
            filters: 
                stack: 
                    (): galaxy.web_stack.application_stack_log_filter
            formatters: 
                stack: 
                    (): galaxy.web_stack.application_stack_log_formatter  
            handlers: 
                console: 
                    class: logging.StreamHandler
                    level: DEBUG
                    stream: ext://sys.stderr
                    filters: [stack]
                    formatter: stack      
                rootlog:
                    class: logging.handlers.TimedRotatingFileHandler
                    when: midnight
                    level: INFO
                    filename: logs/root.log
                    filters: [stack]
                    formatter: stack
                galaxylog:
                    class: logging.handlers.TimedRotatingFileHandler
                    when: midnight
                    level: DEBUG
                    filename: logs/galaxy.log
                    filters: [stack]
                    formatter: stack
                perflog:
                    class: logging.FileHandler
                    level: DEBUG
                    filename: logs/performance.log

            root: 
                handlers: [rootlog]
                level: INFO
            
            loggers: 
                paste.httpserver.ThreadPool: 
                    level: WARN
                    qualname: paste.httpserver.ThreadPool                
                sqlalchemy:
                    level: WARN
                    qualname: sqlalchemy
                sqlalchemy_json.track:
                    level: WARN  
                    qualname: sqlalchemy_json.track
                urllib3.connectionpool: 
                    level: WARN
                    qualname: urllib3.connectionpool                
                routes.middleware: 
                    level: WARN
                    qualname: routes.middleware
                amqp:
                    level: INFO
                    qualname: amqp
                botocore: 
                    level: INFO
                    qualname: botocore
                galaxy:
                    handlers: [galaxylog]
                    level: DEBUG
                    propagate: false
                    qualname: galaxy
                performance:  
                    handlers: [perflog]
                    level: DEBUG
                    propagate: false


ui:
    # UI configuration.
    user_guide_url: https://example.edu/AMP/
    unit: AMP Pilot Unit

rest:
    # PostgreSQL database configuration
    db_host: localhost
    db_name: ampdb
    db_user: ampuser
    db_pass: amppass

    # AMP administrator user, set up on intial start.
    # NOTE: password should be changed interactively after initial start
    # NOTE: After initial setup, these values are ignored(?). 
    admin_username: ampadmin
    admin_password: amppass
    admin_email: ampadmin@example.edu

    # Avalon integration
    avalon_url: https://avalon.example.edu
    avalon_token: some-really-long-hex-string


    # paths, relative to the amp:data_root directory, if the value is a relative path
    logging_path: logs
    storage_path: media
    dropbox_path: dropbox

    # secrets
    amppdui_hmgm_secret: hmgm-secret-text
    encryption_secret: encryption-secret-text
    jwt_secret: jwt-secret-text

    # These properties are to populate the "boilerplate" bits of
    # application properties.  You shouldn't need to change any of these...
    properties:
        # tomcat configuration
        server.servlet.context-path: /rest

        # Spring datasource
        spring.datasource.driver-class-name: org.postgresql.Driver
        spring.datasource.platform: postgres 

        # Spring JPA Stuff
        spring.jpa.database: POSTGRESQL
        spring.jpa.generate-ddl: true
        # ddl-auto should be set to 'create' initially(?) and then 'update' later
        spring.jpa.hibernate.ddl-auto: update
        spring.jpa.show-sql: true 
        spring.jpa.properties.hibernate.format_sql: true
        spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
        spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults: false
        spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation: true 
        spring.jpa.properties.javax.persistence.validation.mode: none

        # Mail
        spring.mail.host: localhost
        spring.mail.port: 25
        spring.mail.protocol: smtp
        spring.mail.properties.mail.smtp.auth: false
        spring.mail.properties.mail.smtp.starttls.enable: false
        spring.mail.properties.mail.smtp.connectiontimeout: 5000
        spring.mail.properties.mail.smtp.timeout: 3000
        spring.mail.properties.mail.smtp.writetimeout: 5000

        # Multipart Request limits
        spring.servlet.multipart.max-file-size: 5GB
        spring.servlet.multipart.max-request-size: 5GB
        spring.servlet.multipart.enabled: true
        
        # Session
        server.servlet.session.timeout: 1800s
        spring.session.timeout: 1800s        
        spring.session.store-type: jdbc
        spring.session.jdbc.initialize-schema: always
        # do I need to fill in the @@platform@@ value?
        spring.session.jdbc.schema: classpath:org/springframework/session/jdbc/schema-@@platform@@.sql
        spring.session.jdbc.table-name: SPRING_SESSION

        # Logging
        logging.level.edu.indiana.dlib.amppd: TRACE
        
        # External sources and task managers
        amppd.externalSources: MCO,DarkAvalon,NYPL
        amppd.taskManagers: Jira,Trello

        # refresh intervals
        amppd.refreshResultsTableMinutes: 300
        amppd.refreshResultsStatusCron: 0 0/10 6-18 ? * MON-FRI
        amppd.refreshResultsTableCron: 0 0 1 ? * MON-FRI
        amppd.refreshWorkflowResultsStatusCron: 0 0/10 6-18 ? * MON-FRI
        amppd.refreshWorkflowResultsAllCron: 0 0 1 ? * MON-FRI

        # misc
        management.endpoints.web.exposure.include: '*'
        amppd.auth: true
        amppd.passwordResetTokenExpiration: 600
        amppd.accountActivationTokenExpiration: 604800
        amppd.environment: prod
        amppd.pythonPath: python3
        amppd.mediaprobeDir: ../MediaProbe/
        amppd.corsOriginPattern: http://localhost:8080

        # timeouts
        amppd.jwtExpireMinutes: 60
        amppd.workflowEditMinutes: 60
        amppd.resetPasswordMinutes: 10
        amppd.activateAccountDays: 7

mgms:
    # Setup for MGMS
    # This is configuration for each individual MGM
    tools:



    # this section is for populating the menu in the galaxy
    # workflow editor.
    galaxy_toolbox:
        Get Data:
            - data_source/upload.xml
            - amp_mgms/supplement.xml
        Send Data:
            - cloud/send.xml
        Audio Extraction:
            - amp_mgms/extract_audio.xml
            - amp_mgms/remove_trailing_silence.xml
        Segmentation:
            - amp_mgms/ina_speech_segmenter.xml
            - amp_mgms/ina_speech_segmenter_hpc.xml
            - amp_mgms/keep_speech.xml
            - amp_mgms/remove_silence_speech.xml
            - amp_mgms/adjust_transcript_timestamps.xml
            - amp_mgms/adjust_diarization_timestamps.xml
            - amp_mgms/applause_detection.xml
            - amp_mgms/applause_detection_to_avalon_xml.xml
        Speech to Text:
            - amp_mgms/aws_transcribe.xml
            - amp_mgms/gentle_forced_alignment.xml
            - amp_mgms/kaldi.xml
            - amp_mgms/kaldi_hpc.xml
            - amp_mgms/transcript_to_webvtt.xml
            - amp_mgms/vocabulary_tagging.xml
        Named Entity Recognition:
            - amp_mgms/spacy.xml
            - amp_mgms/aws_comprehend.xml
            - amp_mgms/ner_to_csv.xml
        Video Indexing:
            - amp_mgms/azure_video_indexer.xml
            - amp_mgms/contact_sheets.xml
            - amp_mgms/contact_sheets_collection.xml
        Shot Detection:
            - amp_mgms/pyscenedetect.xml
            - amp_mgms/azure_shot_detection.xml
        Facial Recognition:
            - amp_mgms/dlib_face_recognition.xml  
        Video Optical Charater Recognition:
            - amp_mgms/tesseract.xml
            - amp_mgms/azure_video_ocr.xml
            - amp_mgms/vocr_to_csv.xml
        Human MGM Editor:
            - amp_mgms/hmgm_transcript.xml
            - amp_mgms/hmgm_ner.xml
            