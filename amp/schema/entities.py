from amp.fileutils import read_json_file, write_json_file
from time import time
import csv


schema = {
    '$schema': "https://json-schema.org/draft/2020-12/schema",    
    'title': "AMP Entities",
    'description': "Content generated by Named Entity Recognition and related tools",
    'type': "object",
    'properties': {
        'metadata': {
            'type': 'object',
            'properties': {
                'tool': {
                    'description': "The tool that created this transcript",
                    'type': 'string'
                },
                'version': {
                    'description': "The version of the tool that created this transcript",
                    'type': 'string',
                },
                'created': {
                    'description': "Creation time of this transcript in unix epoch seconds",
                    'type': 'number'
                }
            },
            'required': ['tool', 'version', 'created']
        },
        'media': {
            'type': 'object',
            'properties': {
                'filename': {
                    'description': 'Source material for this transcript',
                    'type': 'string',
                },
                'characters': {
                    'description': 'Number of characters in the media',
                    'type': 'integer',
                }
            },
            'required': ['filename', 'characters']
        },
        'entities': {
            'type': 'array',
            'items': {
                'type': 'object',
                'properties': {
                    'type': {
                        'description': 'Entity Type',
                        'type': 'string',
                    },
                    'text': {
                        'description': 'Entity text',
                        'type': 'string',
                    },
                    'beginOffset': {
                        'description': 'Start of entity text in characters',
                        'type': 'integer'
                    },
                    'endOffset': {
                        'description': 'End of entity text in characters',
                        'type': 'integer',
                    },
                    'start': {
                        'description': 'Start of entity audio in seconds',
                        'type': 'number',
                    },
                    'score': {
                        'type': 'object',
                        'properties': {
                            'type': {
                                'description': 'Type of entity score',
                                'type': 'string',
                            }, 
                            'value': {
                                'description': 'Value of score',
                                'type': 'number'
                            }
                        },
                        'required': ['type', 'value']
                    }
                },
                'required': ['type', 'text', 'beginOffet', 'endOffset', 'start', 'score']
            }
        }
    },
    'required': ['media', 'entities']    
}

class Entities:
    def __init__(self, tool: str, version: str, created: float=None,
                 media_filename: str='', media_characters: int=0,
                 entities: list=None):
        "Initialize an empty entities object"
        self.data = {
            'metadata': {
                'tool': tool,
                'version': version,
                'created': time() if created is None else created
            },
            'media': {
                'filename': media_filename,
                'characters': media_characters
            },
            'entities': [] if not entities is None else entities
        }            
        

    @classmethod
    def load(cls, filename):
        "Load entities from a file"
        # create an empty instance and then overwrite the data from JSON
        instance = cls('', '')                
        instance.data = read_json_file(filename, schema)        
        return instance


    def save(self, filename):
        "Save entities to a file"
        write_json_file(self.data, filename, schema)


    def add_entity(self, type, text, beginOffset, endOffset, 
                   start: float=None,
                   score_type=None, score_value: float=None):
        "Add an entity to the data"
        self.data['entties'].append({
            'type': type,
            'text': text,
            'beginOffset': beginOffset,
            'endOffset': endOffset,
            'start': 0.0 if start is None else start,
            'score': {
                'type': score_type,
                'value': score_value
            }
        })


    def save_csv(self, filename):
        "Save the data as a CSV file"
        with open(filename, 'w', newline='') as csv_file:
            csv_writer = csv.writer(csv_file, delimiter=',', quotechar='"',
                                    quoting=csv.QUOTE_MINIMAL)
            csv_writer.writerow(['Type', 'Text', 'Begin Offset', 'End Offset', 
				                 'Start Time', 'Score Type', 'Score Value'])
            for e in self.data['entities']:
                csv_writer.writerow([e['type'], e['text'], e['beginOffset'],
			                         e['endOffset'], e['start'],
                                     e['score']['type'], e['score']['value']])
