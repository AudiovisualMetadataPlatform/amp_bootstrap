from amp.fileutils import read_json_file, write_json_file
from time import time


schema = {
    '$schema': "https://json-schema.org/draft/2020-12/schema",    
    'title': "AMP Transcript",
    'description': "Content generated by Speech-to-text and related tools",
    'type': "object",
    'properties': {
        'metadata': {
            'type': 'object',
            'properties': {
                'tool': {
                    'description': "The tool that created this transcript",
                    'type': 'string'
                },
                'version': {
                    'description': "The version of the tool that created this transcript",
                    'type': 'string',
                },
                'created': {
                    'description': "Creation time of this transcript in unix epoch seconds",
                    'type': 'number'
                }
            },
            'required': ['tool', 'version', 'created']
        },
        'media': {
            'type': 'object',
            'properties': {
                'filename': {
                    'description': 'Source material for this transcript',
                    'type': 'string',
                },
                'duration': {
                    'description': 'Duration of media in seconds',
                    'type': 'number',                    
                }
            },
            'required': ['filename', 'duration']
        },
        'results': {
            'type': 'object',
            'properties': {
                'transcript': {
                    'description': "The transcript as a single string",
                    'type': "string"
                },
                'words': {
                    'type': 'array',
                    'items': {
                        'type': 'object',
                        'properties': {
                            'type': {
                                'description': "Type of word",
                                'type': 'string',
                            },
                            'text': {
                                'description': "A word in the transcript",
                                'type': 'string'
                            },
                            'start': {
                                'description': 'Start of the word in seconds',
                                'type': 'number'
                            },
                            'end': {
                                'description': 'End of the word in seconds',
                                'type': 'number'
                            },
                            'offset': {
                                'description': 'Offset of this word in the transcript in characters',
                                'type': 'integer'
                            },
                            'score': {
                                'description': 'Word score',
                                'type': 'object',
                                'properties': {
                                    'type': {
                                        'description': 'Type of score',
                                        'type': 'string'
                                    },
                                    'value': {
                                        'description': 'Value of score',
                                        'type': 'number',
                                    }
                                },
                                'required': ['type', 'value']
                            }
                        },
                        'required': ['type', 'text', 'start', 'end', 'offset']
                    }
                },
                'duration': {
                    'description': "Duration of the transcript in seconds",
                    'type': 'number'
                }
            },            
            'required': ['transcript', 'words', 'duration']
        }
    },
    'required': ['media', 'results']
}


class Transcript:
    "The amp_transcript schema handling"
    def __init__(self, tool: str, version: str, created: float=None, 
                 media_filename: str='', media_duration: float=0,
                 transcript: str='', transcript_duration: float=0,
                 words: list=None):
        "Create a new transcript object"
        
        self.data = {
            'metadata': {
                'tool': tool,
                'version': version,
                'created': time() if created is None else created
            },
            'media': {
                'filename': media_filename,
                'duration': media_duration
            },
            'results': {
                'transcript': transcript,
                'words': [] if words is None else words,
                'duration': transcript_duration,
            }
        }

    @classmethod
    def load(cls, filename):
        "Load a transcript from a file"
        # create an empty instance and then overwrite the data from JSON
        instance = cls('', '')                
        instance.data = read_json_file(filename, schema)        
        return instance


    def save(self, filename):
        "Save a transcript to a file"
        write_json_file(self.data, filename, schema)


    def add_word(self, type, text, start: float, end: float, offset: int=None, score_type='', score_value: float=0.0):
        "Add a word detail to the transcription, updating duration as needed"        
        if offset is None:
            # compute the offset, since none was given.  I'm just going to
            # search for the text starting at the offset+len(word) of the 
            # last word in the list.  Raises an exception if it can't find it.
            if self.data['results']['words']:
                start_point = self.data['results']['words'][-1]['offset'] + len(self.data['results']['words'][-1]['text'])
            else:
                # no previous word, start at the beginning
                start_point = 0 
            offset = self.data['results']['transcript'].index(text, start_point)
	
        self.data['results']['words'].append({
            'type': type,
            'text': text,
            'start': start,
            'end': end,
            'offset': offset,
            'score': {'type': score_type, 'value': score_value}
        })

        # update duration
        self.data['results']['duration'] = max(end, self.data['results']['duration'])
        # in aws_transcript_to_amp_transcript media duration = results duration.
        # that's just wrong, but I'm going to do the same for compatibility
        self.data['media']['duration'] = self.data['results']['duration']


